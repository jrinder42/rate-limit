name: Release and Publish

on:
  push:
    tags:
      - v*

permissions:
  contents: write
  id-token: write  # Required for trusted publishing with uv

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools_scm and tag detection

      - name: Extract tag and detect prerelease
        id: version
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/*/}"
          echo "RELEASE_TAG=$TAG" >> "$GITHUB_ENV"

          if [[ "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
          else
            echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
          fi

      - name: Set PyPI repository
        id: pypi
        run: |
          if [[ "${{ env.IS_PRERELEASE }}" == "true" ]]; then
            echo "PYPI_REPOSITORY=testpypi" >> "$GITHUB_ENV"
          else
            echo "PYPI_REPOSITORY=pypi" >> "$GITHUB_ENV"
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        env:
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
          IS_PRERELEASE: ${{ env.IS_PRERELEASE }}
          IS_DRAFT: "false"
          RELEASE_NAME: "Release ${{ env.RELEASE_TAG }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('.github/workflows/scripts/create_release.js')
            await script(github, context, core)

  publish:
    name: Publish to PyPI
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # âœ… Required for setuptools_scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build package
        run: uv build

      - name: Publish to PyPI using uv
        run: uv publish
        env:
          UV_PUBLISH_REPOSITORY: ${{ env.PYPI_REPOSITORY }}
